"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.registerClasses = registerClasses;
var autoBid = __importStar(require("./auto-bid/structs"));
var tailsStaking = __importStar(require("./tails-staking/structs"));
var tdsAuthorizedEntry = __importStar(require("./tds-authorized-entry/structs"));
var tdsFeePoolEntry = __importStar(require("./tds-fee-pool-entry/structs"));
var tdsRegistryAuthorizedEntry = __importStar(require("./tds-registry-authorized-entry/structs"));
var tdsViewFunction = __importStar(require("./tds-view-function/structs"));
var typusDovSingle = __importStar(require("./typus-dov-single/structs"));
function registerClasses(loader) {
    loader.register(typusDovSingle.Config);
    loader.register(typusDovSingle.Registry);
    loader.register(typusDovSingle.ActivateEvent);
    loader.register(typusDovSingle.AdditionalConfig);
    loader.register(typusDovSingle.ClaimEvent);
    loader.register(typusDovSingle.CloseEvent);
    loader.register(typusDovSingle.CompoundEvent);
    loader.register(typusDovSingle.DeliveryEvent);
    loader.register(typusDovSingle.DeliveryInfo);
    loader.register(typusDovSingle.DeliveryInfos);
    loader.register(typusDovSingle.DepositEvent);
    loader.register(typusDovSingle.DepositSnapshot);
    loader.register(typusDovSingle.DropVaultEvent);
    loader.register(typusDovSingle.ExerciseEvent);
    loader.register(typusDovSingle.HarvestEvent);
    loader.register(typusDovSingle.Info);
    loader.register(typusDovSingle.NewAuctionEvent);
    loader.register(typusDovSingle.NewBidEvent);
    loader.register(typusDovSingle.OracleInfo);
    loader.register(typusDovSingle.OtcEvent);
    loader.register(typusDovSingle.PayoffConfig);
    loader.register(typusDovSingle.PortfolioVault);
    loader.register(typusDovSingle.RaiseFundEvent);
    loader.register(typusDovSingle.RecoupEvent);
    loader.register(typusDovSingle.RedeemEvent);
    loader.register(typusDovSingle.ReduceFundEvent);
    loader.register(typusDovSingle.RefundEvent);
    loader.register(typusDovSingle.SettleEvent);
    loader.register(typusDovSingle.SettlementInfo);
    loader.register(typusDovSingle.TYPUS_DOV_SINGLE);
    loader.register(typusDovSingle.TerminateAuctionEvent);
    loader.register(typusDovSingle.TerminateVaultEvent);
    loader.register(typusDovSingle.TransferBidReceiptEvent);
    loader.register(typusDovSingle.UnsubscribeEvent);
    loader.register(typusDovSingle.VaultConfig);
    loader.register(typusDovSingle.WithdrawEvent);
    loader.register(tdsViewFunction.DepositShare);
    loader.register(tailsStaking.WithdrawEvent);
    loader.register(tailsStaking.LevelUpEvent);
    loader.register(tailsStaking.NftExtension);
    loader.register(tailsStaking.ClaimProfitSharingEvent);
    loader.register(tailsStaking.ClaimProfitSharingEventV2);
    loader.register(tailsStaking.DailyAttendEvent);
    loader.register(tailsStaking.Partner);
    loader.register(tailsStaking.PartnerKey);
    loader.register(tailsStaking.ProfitSharing);
    loader.register(tailsStaking.ProfitSharingEvent);
    loader.register(tailsStaking.SnapshotNftEvent);
    loader.register(tailsStaking.StakeNftEvent);
    loader.register(tailsStaking.TransferNftEvent);
    loader.register(tailsStaking.UnstakeNftEvent);
    loader.register(tailsStaking.UpdateDepositEvent);
    loader.register(tailsStaking.UpdateUrlEvent);
    loader.register(autoBid.AddAuthorutyEvent);
    loader.register(autoBid.AutoBidEvent);
    loader.register(autoBid.CloseStrategyEvent);
    loader.register(autoBid.CloseStrategyEventV2);
    loader.register(autoBid.NewStrategyEvent);
    loader.register(autoBid.NewStrategyEventV2);
    loader.register(autoBid.NewStrategyPoolEvent);
    loader.register(autoBid.NewStrategySignalEvent);
    loader.register(autoBid.NewStrategyVaultEvent);
    loader.register(autoBid.RemoveStrategyVaultEvent);
    loader.register(autoBid.Strategy);
    loader.register(autoBid.StrategyPool);
    loader.register(autoBid.StrategyPoolV2);
    loader.register(autoBid.StrategyV2);
    loader.register(autoBid.UpdateStrategyEvent);
    loader.register(autoBid.WithdrawProfitEvent);
    loader.register(tdsAuthorizedEntry.AddPortfolioVaultAuthorizedUserEvent);
    loader.register(tdsAuthorizedEntry.FixedIncentiviseEvent);
    loader.register(tdsAuthorizedEntry.RemovePortfolioVaultAuthorizedUserEvent);
    loader.register(tdsAuthorizedEntry.UpdateActiveVaultConfigEvent);
    loader.register(tdsAuthorizedEntry.UpdateAuctionConfigEvent);
    loader.register(tdsAuthorizedEntry.UpdateConfigEvent);
    loader.register(tdsAuthorizedEntry.UpdateStrikeEvent);
    loader.register(tdsAuthorizedEntry.UpdateWarmupVaultConfigEvent);
    loader.register(tdsAuthorizedEntry.WithdrawFixedIncentiveEvent);
    loader.register(tdsFeePoolEntry.SendFeeEvent);
    loader.register(tdsFeePoolEntry.AddFeePoolAuthorizedUserEvent);
    loader.register(tdsFeePoolEntry.AddSharedFeePoolAuthorizedUserEvent);
    loader.register(tdsFeePoolEntry.RemoveFeePoolAuthorizedUserEvent);
    loader.register(tdsFeePoolEntry.RemoveSharedFeePoolAuthorizedUserEvent);
    loader.register(tdsFeePoolEntry.TakeFeeEvent);
    loader.register(tdsFeePoolEntry.TakeSharedFeeEvent);
    loader.register(tdsRegistryAuthorizedEntry.WithdrawIncentiveEvent);
    loader.register(tdsRegistryAuthorizedEntry.AddAuthorizedUserEvent);
    loader.register(tdsRegistryAuthorizedEntry.IncentiviseEvent);
    loader.register(tdsRegistryAuthorizedEntry.NewPortfolioVaultEvent);
    loader.register(tdsRegistryAuthorizedEntry.RemoveAuthorizedUserEvent);
    loader.register(tdsRegistryAuthorizedEntry.ResumeTransactionEvent);
    loader.register(tdsRegistryAuthorizedEntry.SetAvailableIncentiveAmountEvent);
    loader.register(tdsRegistryAuthorizedEntry.SuspendTransactionEvent);
    loader.register(tdsRegistryAuthorizedEntry.UpgradeRegistryEvent);
}
