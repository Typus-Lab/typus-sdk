"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.registerClasses = registerClasses;
var admin = __importStar(require("./admin/structs"));
var lpPool = __importStar(require("./lp-pool/structs"));
var oracle = __importStar(require("./oracle/structs"));
var position = __importStar(require("./position/structs"));
var stakePool = __importStar(require("./stake-pool/structs"));
var symbol = __importStar(require("./symbol/structs"));
var tlp = __importStar(require("./tlp/structs"));
var trading = __importStar(require("./trading/structs"));
var treasuryCaps = __importStar(require("./treasury-caps/structs"));
function registerClasses(loader) {
    loader.register(admin.FeeInfo);
    loader.register(admin.FeePool);
    loader.register(admin.ManagerCap);
    loader.register(admin.SendFeeEvent);
    loader.register(admin.Version);
    loader.register(treasuryCaps.TreasuryCaps);
    loader.register(tlp.LpRegistry);
    loader.register(tlp.TLP);
    loader.register(oracle.PythPrice);
    loader.register(oracle.PythPriceInfoObject);
    loader.register(lpPool.Config);
    loader.register(lpPool.State);
    loader.register(lpPool.AddLiquidityTokenEvent);
    loader.register(lpPool.BurnLpEvent);
    loader.register(lpPool.LiquidityPool);
    loader.register(lpPool.LiquidityPoolInfo);
    loader.register(lpPool.MarginConfig);
    loader.register(lpPool.MintLpEvent);
    loader.register(lpPool.NewLiquidityPoolEvent);
    loader.register(lpPool.Registry);
    loader.register(lpPool.ResumePoolEvent);
    loader.register(lpPool.ResumeTokenPoolEvent);
    loader.register(lpPool.SpotConfig);
    loader.register(lpPool.SuspendPoolEvent);
    loader.register(lpPool.SuspendTokenPoolEvent);
    loader.register(lpPool.SwapEvent);
    loader.register(lpPool.TokenPool);
    loader.register(lpPool.UpdateLiquidityValueEvent);
    loader.register(lpPool.UpdateMarginConfigEvent);
    loader.register(lpPool.UpdateSpotConfigEvent);
    loader.register(symbol.Symbol);
    loader.register(position.OrderFilledEvent);
    loader.register(position.Position);
    loader.register(position.RealizeFundingEvent);
    loader.register(position.RealizedPnlEvent);
    loader.register(position.RemovePositionEvent);
    loader.register(position.TradingOrder);
    loader.register(stakePool.UnsubscribeEvent);
    loader.register(stakePool.ActivateIncentiveTokenEvent);
    loader.register(stakePool.AddIncentiveTokenEvent);
    loader.register(stakePool.DeactivateIncentiveTokenEvent);
    loader.register(stakePool.DeactivatingShares);
    loader.register(stakePool.DepositIncentiveEvent);
    loader.register(stakePool.HarvestPerUserShareEvent);
    loader.register(stakePool.Incentive);
    loader.register(stakePool.IncentiveConfig);
    loader.register(stakePool.IncentiveInfo);
    loader.register(stakePool.LpUserShare);
    loader.register(stakePool.NewStakePoolEvent);
    loader.register(stakePool.RemoveIncentiveTokenEvent);
    loader.register(stakePool.StakeEvent);
    loader.register(stakePool.StakePool);
    loader.register(stakePool.StakePoolConfig);
    loader.register(stakePool.StakePoolInfo);
    loader.register(stakePool.StakePoolRegistry);
    loader.register(stakePool.UnstakeEvent);
    loader.register(stakePool.UpdateIncentiveConfigEvent);
    loader.register(stakePool.UpdateUnlockCountdownTsMsEvent);
    loader.register(stakePool.WithdrawIncentiveEvent);
    loader.register(trading.AddTradingSymbolEvent);
    loader.register(trading.CancelTradingOrderEvent);
    loader.register(trading.CreateTradingOrderEvent);
    loader.register(trading.CreateTradingOrderWithBidReceiptsEvent);
    loader.register(trading.IncreaseCollateralEvent);
    loader.register(trading.LinkedOrdersInfo);
    loader.register(trading.LiquidateEvent);
    loader.register(trading.ManagerReducePosition);
    loader.register(trading.MarketConfig);
    loader.register(trading.MarketInfo);
    loader.register(trading.MarketRegistry);
    loader.register(trading.Markets);
    loader.register(trading.MatchTradingOrderEvent);
    loader.register(trading.NewMarketsEvent);
    loader.register(trading.ReleaseCollateralEvent);
    loader.register(trading.ResumeMarketEvent);
    loader.register(trading.ResumeTradingSymbolEvent);
    loader.register(trading.SuspendMarketEvent);
    loader.register(trading.SuspendTradingSymbolEvent);
    loader.register(trading.SymbolMarket);
    loader.register(trading.USD);
    loader.register(trading.UpdateFundingRateEvent);
    loader.register(trading.UpdateMarketConfigEvent);
    loader.register(trading.UpdateProtocolFeeShareBpEvent);
}
